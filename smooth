#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 28 15:11:38 2025

@author: winkler
"""

import argparse
import numpy as np
import h5py
import time

import lib

def create_empty_hdf5(filename, rows, cols, dtype=np.float64):
    """Create empty HDF5 matrix file with compression."""
    with h5py.File(filename, 'w') as f:
        # Column-optimized chunking
        chunk_cols = min(64, cols)
        chunks     = (rows, chunk_cols)        
        f.create_dataset(   'matrix',
            shape            = (rows, cols),
            dtype            = dtype,
            chunks           = chunks,
            compression      = 'gzip',
            compression_opts = 9,
            shuffle          = True )

if __name__ == "__main__":

    # To create distance matrix, need these options:
    # --surf
    # --method (mitchell, crane or dijkstra)
    # --maxfwhm
    # --outdist
    #
    # To smooth data using a distance matrix (mitchell, crane or dijkstra)
    # --in
    # --indist (if previously created)
    # --fwhm
    # --mask (optional)
    # --out
    #
    # To smooth data using the basic iterative method
    # --method iterative
    # --surf
    # --in
    # --fwhm
    # --mask (optional)
    # --out

    # Argument parser
    parser = argparse.ArgumentParser(
                        description=\
                        'Smooth data on the surface of a mesh using geodesic distances.',
                        epilog=\
                        'Anderson M. Winkler / UTRGV / Jul 2025 / https://brainder.org')
    parser.add_argument('--method',
                        help='Method to compute distances. Can be "mitchell", "crane", "dijkstra", "iterative", or "freesurfer".',
                        type=str, required=False, default=None)
    parser.add_argument('--subj',
                        help='Subject (must exist in the SUBJECTS_DIR directory. Needed for "--method freesurfer".',
                        type=str, required=False, default=None)
    parser.add_argument('--surf',
                        help='Surface to compute geodesic distances, each vertex to each other vertex.',
                        type=str, required=False, default=None)
    parser.add_argument('--outdist',
                        help="Path to the file to store distance matrix (in HDF5 format).",
                        type=str, required=False, default=None)
    parser.add_argument('--maxfwhm',
                        help="Maximum intended FWHM with which the matrix of distances will be used.",
                        type=float, required=False, default=30)
    parser.add_argument('--indist',
                        help="Path to the file with distance matrix stored (in HDF5 format).",
                        type=str, required=False, default=None)
    parser.add_argument('--in', dest='infile',
                        help="Path to the file with data to be smoothed.",
                        type=str, required=False, default=None)
    parser.add_argument('--out', dest='outfile',
                        help="Path to the file to be created with smoothed data.",
                        type=str, required=False, default=None)
    parser.add_argument('--fwhm',
                        help="FWHM to smooth the data.",
                        type=float, required=False, default=10)
    parser.add_argument('--mask', dest='maskfile',
                        help="Path to the mask file (inclusive mask, can be fuzzy).",
                        type=str, required=False, default=None)
    parser.add_argument('--progress',
                        help='Show a progress bar (avoid in headless systems)',
                        action='store_true', required=False, default=False)
    args = parser.parse_args()
    
    # Sanity checks
    if args.method is None:
        if args.subj is None:
            raise ValueError('Error: Must specify a method with "--method".')
        else:
            args.method = 'freesurfer'
        
    if args.method.lower() in ('freesurfer', 'fs'): # FreeSurfer method, for all known measures
        import os
        fshome  = os.getenv('FREESURFER_HOME')
        subjdir = os.getenv('SUBJECTS_DIR')
        
        # Sanity checks
        if args.subj is None:
            raise ValueError('Error: With --method freesurfer, a subject must be specified with --subj.')
        if fshome is None:
            raise ValueError('Error: Environment variable FREESURFER_HOME has not been set.')
        if subjdir is None:
            raise ValueError('Error: Environment variable SUBJECTS_DIR has not been set.')
        subj = args.subj
        fwhm = int(np.round(args.fwhm))
        
        # Read json file with specs of what we'll smooth
        specs = lib.io.read_json(os.path.join(os.path.dirname(__file__), 'etc', 'specs.json'))
    
        # Output directory
        outdir = os.path.join(subjdir, subj, 'after', 'smooth','fwhm{}'.format(fwhm))
        os.makedirs(outdir, exist_ok=True)
        
        # For each measure we'll smooth
        for hemi in ('lh', 'rh'):
            for meas in specs['measures']:
                
                # If no surface is specified (e.g., for parcellations), we'll skip
                if specs['measures'][meas]['smooth'] is None:
                    continue
                
                # For each surface we measured on or want to smooth on
                for surf in specs['measures'][meas]['smooth']:
                    measfile = os.path.join(subjdir, subj,
                                            specs['measures'][meas]['dir'],
                                            specs['measures'][meas]['file'].format(hemi=hemi, surf=surf, meas=meas))
                    
                    # Skip if the measure doesn't exist
                    if not os.path.exists(measfile):
                        print(f'Warning: Input file does not exist: {measfile}')
                        continue
                    outfile  = os.path.join(subjdir, subj,
                                            'after', 'smooth', 'fwhm{}'.format(fwhm),
                                            specs['measures'][meas]['file'].format(hemi=hemi, surf=surf, meas=meas))
                    
                    # For w-g.pct.mgh, etc, we want to drop the extension and save as curvature for consistency
                    for suffix in ('.mgh', '.mgz'):
                        if outfile.endswith(suffix):
                            outfile = outfile[:-len(suffix)]
                            
                    # Smoothing proper, using FreeSurfer
                    opts = '--s {subj} --hemi {hemi} --sval {measfile} --surfreg {surf} --fwhm-trg {fwhm} --trg_type curv --cortex --tval {outfile}'
                    opts = opts.format(subj=subj, hemi=hemi, measfile=measfile, surf=surf, fwhm=fwhm, outfile=outfile)
                    cmd  = os.path.join(fshome, 'bin', f'mri_surf2surf {opts}')
                    status = os.system(cmd)
                    if status != 0:
                        raise OSError(f'Error: Failed to run {cmd}')
    
    elif args.method.lower() == 'iterative': # basic iterative method, not very accurate
    
        # Sanity checks
        if args.surf is None:
            raise ValueError('Error: Must provide a surface with --surf.')
        if args.infile is None:
            raise ValueError('Error: Must provide a file to smooth with --in.')
        if args.indist is not None or args.outdist is not None:
            raise ValueError('Error: Cannot use --indist  nor --outdist with the iterative method.')
        if args.out is None:
            raise ValueError('Error: Need the option --out.')
            
        # Read surface file
        vtx, fac, _, _ = lib.io.read_surf(args.surf)
        
        # Read input data
        data, _ = lib.io.read_curv(args.infile, is_ascii=False)
        
        # Read mask
        if args.maskfile is None:
            mask = None
        else:
            mask, _ = lib.io.read_curv(args.maskfile, is_ascii=False)
        
        # Smooth
        sdata = lib.surf.iterative_smoothing(data, vtx, fac, FWHM=args.fwhm, mask=mask)
        
        # Save smoothed data
        lib.io.write_curv(args.outfile, sdata)
        
    else: # all other methods
        
        # Sanity checks
        create = False
        apply  = False
        if args.surf is not None or args.outdist is not None:
            create = True
        if args.indist is not None or args.infile is not None:
            apply = True
        if args.surf is not None and args.indist is not None:
            raise ValueError('Error: Cannot use --indist together with --surf or --outdist.')
        if create and (args.surf is None or args.outdist is None):
            raise ValueError('Error: If creating a distance matrix, need both --surf and --outdist.')
        if apply and args.outfile is None:
            raise ValueError('Error: If applying smoothing, need the option --out.')
        if create and not apply and args.maskfile is None:
            raise ValueError('Error: When only creating a distance matrix, do not provide --mask.')
        if args.outdist is not None:
            if not args.outdist.endswith('.h5'):
                args.outdist = args.outdist + '.h5'
                
        # Fork according to the 3 main cases
        if   create and not apply: # ==============================================
            # Case 1: Create a distance matrix and save it. Don't smooth any data.
            
            # Read surface file
            vtx, fac, _, _ = lib.io.read_surf(args.surf)
            nV = vtx.shape[0]
            
            # Create empty HDF5 to store the distance matrix
            create_empty_hdf5(args.outdist, nV, nV, dtype=np.float32)
            
            if args.method.lower() in ['mitchell', 'exact', 'mmp']:
                # Use the method by Mitchell, Mount, and Papadimitriou (1987).
                # This is exact but very slow for meshes with more than a few hundred vertices.
                import gdist
                
                # Convert to native byte order
                vtx_native = vtx.astype(np.float64, order='C', copy=True)
                fac_native = fac.astype(np.int32,   order='C', copy=True)
                vtx_native = np.ascontiguousarray(vtx_native, dtype=np.float64)
                fac_native = np.ascontiguousarray(fac_native, dtype=np.int32)
                
                # How far to keep computing distances
                if args.maxfwhm is None:
                    maxdist = np.inf
                else:
                    maxdist = 4 * args.maxfwhm / np.sqrt(8*np.log(2)) # 4*sigma
    
                # Open the HDF5 file for writing, then iterate over vertices to
                # compute the distances and storing
                with h5py.File(args.outdist, 'r+') as f:
                    start_time = time.time()
                    for v in range(nV):
                        if args.progress:
                            lib.utils.progress_bar(v, nV, start_time, prefix='Processing vertices:', min_update_interval=1)
                        dist = gdist.compute_gdist(vtx_native, fac_native,
                                                               max_distance   = maxdist,
                                                               source_indices = np.array([v],
                                                               dtype          = np.int32))
                        f['matrix'][:,v] = np.exp(-dist)
    
            elif args.method.lower() in ['crane', 'fast', 'approximate', 'heat', 'cww']:
                # Use the method by Crane, Weischedel, and Wardetzky (2013), which
                # uses heat diffusion for a much faster approximation, that is best for
                # finely resolved meshes
                import potpourri3d as pp3d
                solver = pp3d.MeshHeatMethodDistanceSolver(vtx, fac, t_coef=1.0, use_robust=True)
                
                # Open the HDF5 file for writing, then iterate over vertices to
                # compute the distances and storing
                with h5py.File(args.outdist, 'r+') as f:
                    start_time = time.time()
                    for v in range(nV):
                        if args.progress:
                            lib.utils.progress_bar(v, nV, start_time, prefix='Processing vertices:', min_update_interval=1)
                        dist = solver.compute_distance(v)     
                        f['matrix'][:,v] = np.exp(-dist)   
    
        elif apply and not create: # ==============================================
            # Case 2: Apply an existing distance matrix to smooth data.
            import scipy as sp
            
            # Read input data
            data, _ = lib.io.read_curv(args.infile, is_ascii=False)
            sigma   = args.fwhm / np.sqrt(8*np.log(2))
            nV      = data.shape[0]
            
            # Read mask and mask data
            if args.maskfile is None:
                mask = None
            else:
                mask, _ = lib.io.read_curv(args.maskfile, is_ascii=False)
                data = data * mask
            
            # With the HDF5 file open, smooth each vertex
            sdata   = np.zeros(data.shape)
            with h5py.File(args.indist,'r') as f:
                start_time = time.time()
                for v in range(nV):
                    if args.progress:
                        lib.utils.progress_bar(v, nV, start_time, prefix='Processing vertices:', min_update_interval=1)
                    dist     = -np.log(f['matrix'][:,v])
                    filt     = sp.stats.norm.pdf(dist, loc=0, scale=sigma)
                    if mask is not None:
                        filt = filt * mask
                    filt     = filt/filt.sum()
                    sdata[v] = np.sum(data * filt)
    
            # Save smoothed data
            lib.io.write_curv(args.outfile, sdata)
            
        elif create and apply: # ==================================================
            # Case 3: Create and apply an existing distance matrix to smooth data.
            import scipy as sp
            
            # Read surface file
            vtx, fac, _, _ = lib.io.read_surf(args.surf)
            nV = vtx.shape[0]
            
            # Read input data
            data, _ = lib.io.read_curv(args.infile, is_ascii=False)
            sigma   = args.fwhm / np.sqrt(8*np.log(2))
            nV      = data.shape[0]
            
            # Read mask and mask data
            if args.maskfile is None:
                mask = None
            else:
                mask, _ = lib.io.read_curv(args.maskfile, is_ascii=False)
                data = data * mask
            
            # Create empty HDF5 to store the distance matrix
            create_empty_hdf5(args.outdist, nV, nV, dtype=np.float32)
            
            if args.method.lower() in ['mitchell', 'exact', 'mmp']:
                # Use the method by Mitchell, Mount, and Papadimitriou (1987).
                # This is exact but very slow for meshes with more than a few hundred vertices.
                import gdist
                
                # Convert to native byte order
                vtx_native = vtx.astype(np.float64, order='C', copy=True)
                fac_native = fac.astype(np.int32,   order='C', copy=True)
                vtx_native = np.ascontiguousarray(vtx_native, dtype=np.float64)
                fac_native = np.ascontiguousarray(fac_native, dtype=np.int32)
                
                # How far to keep computing distances
                if args.maxfwhm is None:
                    maxdist = np.inf
                else:
                    maxdist = 4 * args.maxfwhm / np.sqrt(8*np.log(2)) # 4*sigma
    
                # Open the HDF5 file for writing, then iterate over vertices to
                # compute the distances and storing
                sdata   = np.zeros(data.shape)
                with h5py.File(args.outdist, 'r+') as f:
                    start_time = time.time()
                    for v in range(nV):
                        if args.progress:
                            lib.utils.progress_bar(v, nV, start_time, prefix='Processing vertices:', min_update_interval=1)
                        dist = gdist.compute_gdist(vtx_native, fac_native,
                                                   max_distance   = maxdist,
                                                   source_indices = np.array([v],
                                                   dtype          = np.int32))
                        f['matrix'][:,v] = np.exp(-dist)
                        filt     = sp.stats.norm.pdf(dist, loc=0, scale=sigma)
                        if mask is not None:
                            filt = filt * mask
                        filt     = filt/filt.sum()
                        sdata[v] = np.sum(data * filt)
    
            elif args.method.lower() in ['crane', 'fast', 'approximate', 'heat', 'cww']:
                # Use the method by Crane, Weischedel, and Wardetzky (2013), which
                # uses heat diffusion for a much faster approximation, that is best for
                # finely resolved meshes
                import potpourri3d as pp3d
                solver = pp3d.MeshHeatMethodDistanceSolver(vtx, fac, t_coef=1.0, use_robust=True)
                
                # Open the HDF5 file for writing, then iterate over vertices to
                # compute the distances and storing
                sdata   = np.zeros(data.shape)
                with h5py.File(args.outdist, 'r+') as f:
                    start_time = time.time()
                    for v in range(nV):
                        if args.progress:
                            lib.utils.progress_bar(v, nV, start_time, prefix='Processing vertices:', min_update_interval=1)
                        dist = solver.compute_distance(v)
                        f['matrix'][:,v] = np.exp(-dist)
                        filt     = sp.stats.norm.pdf(dist, loc=0, scale=sigma)
                        if mask is not None:
                            filt = filt * mask
                        filt     = filt/filt.sum()
                        sdata[v] = np.sum(data * filt)
    
            # Save smoothed data
            lib.io.write_curv(args.outfile, sdata)
        
        else:
            parser.print_help()
            raise ValueError('Nothing to do.')