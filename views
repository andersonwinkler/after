#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 23 20:56:06 2025

@author: winkleram
"""
import os
import numpy as np
import glob
import argparse
import pyvista as pv
import matplotlib.colors as mcolors
import nibabel as nib
from PIL import Image
import gc
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize

import lib

def load_surf(subjdir, sub, surf, specs=None): # ==============================
    '''
    Load surface for left and right hemis, and concatenate them too

    Parameters
    ----------
    subjdir : str
        Path to subjects' dir ($SUBJECTS_DIR).
    sub : str
        Subject (a directory within subjdir).
    surf : str
        Name of a FreeSurfer surface, e.g., white, pial, inflated, sphere, sphere.reg, etc.
        or a path to that surface (filename must start with lh or rh)
    specs : dict
        Optional dict with a subdict under 'surfaces' from which some info is obtained.

    Returns
    -------
    vtx : dict
        Vertex coordinates for lh, rh, and bh.
    fac : dict
        Face indices for lh, rh, and bh.
    '''
    
    # Filenames for lh and rh
    surfname = {}
    if os.path.exists(surf):
        fpth, fnam = os.path.split(surf)
        if fnam.startswith('lh'):
            surfname['lh'] = surf
            fnam[0:2] = 'rh'
            surfname['rh'] = os.path.join(fpth, fnam)
        elif fnam.startswith('rh'):
            surfname['rh'] = surf
            fnam[0:2] = 'lh'
            surfname['lh'] = os.path.join(fpth, fnam)
        else:
            raise ValueError('Surface file name must start with "lh" or "rh".')
    else:
        fnam = os.path.join(subjdir, sub, specs['surfaces'][surf]['dir'], 'lh.{}'.format(surf))
        if os.path.exists(fnam):
            surfname['lh'] = fnam
        else:
            raise ValueError('File does not exist: {}.'.format(fnam))
        fnam = os.path.join(subjdir, sub, specs['surfaces'][surf]['dir'], 'rh.{}'.format(surf))
        if os.path.exists(fnam):
            surfname['rh'] = fnam
        else:
            raise ValueError('File does not exist: {}.'.format(fnam))
    
    # Load surface
    vtx = {}
    fac = {}
    for h in ['lh', 'rh']:
        vtx[h], fac[h], _, _  = lib.io.read_surf(surfname[h])
    
    # Shift coords a bit for inflated or sphere
    if 'inflated' in surf or 'sphere' in surf:
        vtx['lh'][:,0] = vtx['lh'][:,0] - np.max(vtx['lh'][:,0]) - 10
        vtx['rh'][:,0] = vtx['rh'][:,0] - np.min(vtx['rh'][:,0]) + 10
    vtx['bh'] = np.concatenate((vtx['lh'], vtx['rh']))
    
    # Create "both" hemispheres
    vtx['bh'] = np.concatenate((vtx['lh'], vtx['rh']))
    fac['bh'] = np.concatenate((fac['lh'], fac['rh'] + len(vtx['lh'])))
    for h in fac: # we need to add a column with "3" as needed by VTK/PyVista
        fac[h] = np.hstack((3*np.ones((fac[h].shape[0],1)).astype(int),fac[h]))
    return vtx, fac

def load_meas(subjdir, sub, meas, specs=None): # ==============================
    '''
    Load overlay measure

    Parameters
    ----------
    subjdir : str
        Path to subjects' dir ($SUBJECTS_DIR).
    sub : str
        Subject (a directory within subjdir).
    meas : str
        Overlay measure, e.g., thichness, sulc, curv, etc.
    specs: dict
        Optional dict with a subdict under 'measures' from which some info is obtained.
        
    Returns
    -------
    dat : dict
        Data overlay for lh, rh, and bh.
    rgb : NumPy array
        Color map (for annot files)
    '''
    
    # Filenames for the measure
    measname = {}
    if os.path.exists(meas):
        fpth, fnam = os.path.split(meas)
        if fnam.startswith('lh'):
            measname['lh'] = meas
            fnam[0:2] = 'rh'
            measname['rh'] = os.path.join(fpth, fnam)
        elif fnam.startswith('rh'):
            measname['rh'] = meas
            fnam[0:2] = 'lh'
            measname['lh'] = os.path.join(fpth, fnam)
        else:
            raise ValueError('Measure file name must start with "lh" or "rh".')
    else:
        fnam = os.path.join(subjdir, sub, specs['measures'][meas]['dir'], 'lh.{}'.format(meas))
        if os.path.exists(fnam):
            measname['lh'] = fnam
        else:
            raise ValueError('File does not exist: {}.'.format(fnam))
        fnam = os.path.join(subjdir, sub, specs['measures'][meas]['dir'], 'rh.{}'.format(meas))
        if os.path.exists(fnam):
            measname['rh'] = fnam
        else:
            raise ValueError('File does not exist: {}.'.format(fnam))
    
    # Load data overlay
    dat = {}
    if meas.endswith('.mgz') or meas.endswith('.mgh'):
        for h in ['lh', 'rh']:
            dat[h] = np.squeeze(nib.load(measname[h]).get_fdata()) # XXX pending fix
        rgb = None
    elif meas.endswith('annot'):
        for h in ['lh', 'rh']:
            lab, ctab, _ = lib.io.read_annot(measname[h])
            dat[h] = lab2fac(lab, fac[h])
        rgb = ctab[:,0:3]
    else:
        for h in ['lh', 'rh']:
            dat[h] = lib.io.read_curv(measname[h])
        rgb = None
    
    # Create "both" hemispheres
    dat['bh'] = np.concatenate((dat['lh'], dat['rh']))
    return dat, rgb


def lab2fac(lab, fac): # ======================================================
    '''
    Take vertexwise labels and transform into facewise labels
    by majority voting. If no consensus, the final vertex has precedence.

    Parameters
    ----------
    lab : NumPy array, nvtx by 1
        Labels (generally integers).
    fac : NumPy Array, nfac by 3
        Vertex indices that determine a face.

    Returns
    -------
    newlab : Numpy array, nfac by 1
        Labels for each face.

    '''
    newlab = np.zeros((fac.shape[0],1), dtype=int)
    lab[lab<0] = 0
    labf = lab[fac]
    idx0 = (labf[:,0] == labf[:,1]) | (labf[:,0] == labf[:,2])
    newlab[idx0,0] = labf[idx0,0] # vtx1 agrees with vtx2 or vtx3
    idx1 = labf[:,1] == labf[:,2]
    newlab[idx1,0] = labf[idx1,1] # vtx2 agrees with vtx3
    idx2 = ~(idx0 | idx1)
    newlab[idx2,0] = labf[idx2,2] # vtx3 has the final say
    return newlab

def plot_views(vtx, fac, dat, outdir, mesh, meas, specs): # ================
    '''
    Plot views.
    '''
    
    # Prepare the colormap
    if 'rgb' in specs['measures'][meas]:
        rgb  = specs['measures'][meas]['rgb'] / 255.0
        cmap = mcolors.LinearSegmentedColormap.from_list('', rgb)
    else:
        cmap = specs['measures'][meas]['cmap']
    clim = specs['measures'][meas]['clim']
    
    # Meshes for subsequent plotting
    mesh = {}
    for h in ['lh','rh','bh']:
        mesh[h] = pv.PolyData(vtx[h], fac[h])
        mesh[h]['scalars'] = dat[h][:,None].copy() # PyVista has a bug and if we don't copy, it will sometimes alter the original data
    
    # Plot each view
    for view in specs['views']:
        if   view in ['lhlat', 'lhmed']:
            h = 'lh'
        elif view in ['rhlat', 'rhmed']:
            h = 'rh'
        else:
            h = 'bh'
        
        # Render the image, save as a file
        p = pv.Plotter(window_size=(2000, 2000), off_screen=True)
        p.background_color = (0, 0, 0)
        p.add_mesh(mesh[h], clim=clim, cmap=cmap, show_scalar_bar=False)
        p.view_xz()
        p.camera.elevation = specs['views'][view]['elevation']
        p.camera.azimuth   = specs['views'][view]['azimuth']
        p.screenshot(os.path.join(outdir,'{}_{}_{}.png'.format(surf, meas, view)))
        
        # Resize the image to create a thumbnail
        img = Image.open(os.path.join(outdir,'{}_{}_{}.png'.format(surf, meas, view)))
        img.thumbnail((200, 200), Image.LANCZOS)
        img.save(os.path.join(outdir,'thumbnails','{}_{}_{}.png'.format(surf, meas, view)))
        pv.close_all()
        del p
        gc.collect()

def plot_hist(dat, cbins, outdir, meas, specs): # =============================
    '''
    Plot histogram.
    '''
    
    # Figure background color
    bg_color = (0.85, 0.85, 0.85)
    
    # Prepare the colormap
    if 'rgb' in specs['measures'][meas]:
        rgb    = specs['measures'][meas]['rgb'] / 255.0
        cmap   = mcolors.LinearSegmentedColormap.from_list('', rgb)
        dlim   = [0, rgb.shape[0]]
        clim   = specs['measures'][meas]['clim']
        dbins  = rgb.shape[0]
    else:
        cmap   = plt.colormaps[specs['measures'][meas]['cmap']]
        dlim   = specs['measures'][meas]['dlim']
        clim   = specs['measures'][meas]['clim']
        deltad = dlim[1] - dlim[0]
        deltac = clim[1] - clim[0]
        dbins  = int(np.ceil(cbins * deltad / deltac))
    
    # For each hemisphere
    for h in ['lh', 'rh', 'bh']:
        
        # We want to replace label numbers for 0, 1, 2...
        if 'rgb' in specs['measures'][meas]:
            _, dat[h] = np.unique(dat[h], return_inverse=True)
        
        # Data for the histogram
        counts, bin_edges = np.histogram(dat[h], bins=dbins, range=dlim)
        bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2
        
        # Coloring based on whether we have RGB array or continuous colormap
        if 'rgb' in specs['measures'][meas]:
            # dat[h] now contains integers corresponding to rgb rows
            # Create colors for each bin based on the row numbers
            bar_colors = []
            for center in bin_centers:
                # Find the closest integer (which corresponds to rgb row index)
                idx = int(np.round(center))
                # Ensure index is within bounds
                idx = np.clip(idx, 0, len(rgb) - 1)
                bar_colors.append(rgb[idx])
            bar_colors = np.array(bar_colors)
        else:
            # For continuous colormap
            norm = Normalize(vmin=clim[0], vmax=clim[1], clip=False)
            bar_colors = cmap(norm(bin_centers))
        
        # Main figure
        fig = plt.figure(figsize=(20, 20), facecolor=bg_color)  # 2000x2000 pixels at 100 DPI
        plot_width  = 0.6   # 60% of figure width for 4:3 ratio
        plot_height = 0.45  # 45% of figure height for 4:3 ratio
        left   = (1 - plot_width) / 2
        bottom = (1 - plot_height) / 2
        ax = fig.add_axes([left, bottom, plot_width, plot_height])
        ax.set_facecolor(bg_color)
        ax.bar(bin_centers, counts, width=np.diff(bin_edges), color=bar_colors)
        ax.set_xlim(dlim[0], dlim[1])
        ax.set_xlabel(meas)
        ax.set_ylabel('Frequency')
        plt.savefig(os.path.join(outdir, 'hist_{}_{}.png'.format(meas, h)),
                    dpi=100, facecolor=bg_color, edgecolor='none')
        plt.close(fig)
        
        # Thumbnail
        fig_thumb = plt.figure(figsize=(2, 2), facecolor=bg_color)  # 200x200 pixels at 100 DPI
        plot_width  = 0.96  # 96% of figure width for 4:3 ratio
        plot_height = 0.72  # 72% of figure height for 4:3 ratio
        left   = (1 - plot_width) / 2
        bottom = (1 - plot_height) / 2
        ax_thumb = fig_thumb.add_axes([left, bottom, plot_width, plot_height])
        ax.set_facecolor(bg_color)
        ax_thumb.bar(bin_centers, counts, width=np.diff(bin_edges), color=bar_colors)
        ax_thumb.set_xlim(dlim[0], dlim[1])
        ax_thumb.set_xticks([])
        ax_thumb.set_yticks([])
        ax_thumb.spines['top'].set_visible(False)
        ax_thumb.spines['right'].set_visible(False)
        ax_thumb.spines['bottom'].set_visible(False)
        ax_thumb.spines['left'].set_visible(False)
        plt.figure(fig_thumb.number)  # Ensure we're saving the thumbnail figure
        plt.savefig(os.path.join(outdir, 'thumbnails', 'hist_{}_{}.png'.format(meas, h)),
                    dpi=100, facecolor=bg_color, edgecolor='none')
        plt.close(fig_thumb)
        
def makehtml(htmldir, subjlist, surf, meas, specs): # =========================
    '''
    Make HTML file. Variables are as in the other functions.
    '''
    os.makedirs(os.path.join(htmldir), exist_ok=True)
    with open(os.path.join(htmldir,'{}_{}.html'.format(surf,meas)), 'w', encoding='utf-8') as f:
        f.write('<html><body bgcolor="#222222"><table>\n')
        for subj in subjlist:
            viewsdir = os.path.relpath(os.path.join(subjdir, subj, 'after', 'views'), start=htmldir)
            f.write('<tr>\n')
            for view in specs['views']:
                f.write('<td><a href="{}"><img src="{}" border=0 title="{}"></a></td>\n'.format(
                    os.path.join(viewsdir, '{}_{}_{}.png'.format(surf, meas, view)),
                    os.path.join(viewsdir, 'thumbnails','{}_{}_{}.png'.format(surf, meas, view)),
                    '{}, {}, {}, {}'.format(subj, surf, meas, view)))
            for h in ['lh', 'rh', 'bh']:
                f.write('<td><a href="{}"><img src="{}" border=0 title="{}"></a></td>\n'.format(
                    os.path.join(viewsdir, 'hist_{}_{}.png'.format(meas, h)),
                    os.path.join(viewsdir, 'thumbnails','hist_{}_{}.png'.format(meas, h)),
                    '{}, {}, {}'.format(subj, meas, h)))
            f.write('</tr>\n')
        f.write('</table></body></html>')

######## MAIN FUNCTION ########################################################
if __name__ == "__main__":

    # Argument parser
    parser = argparse.ArgumentParser(
                        description=\
                        'Plot surface views for each subject, and makes an HTML page for visualization.',
                        epilog=\
                        'Anderson M. Winkler / UTRGV / May 2025 / https://brainder.org')
    parser.add_argument('--subj',
                        help='List of subjects separated by commas',
                        type=str, required=False, default=None)
    parser.add_argument('--subjdir',
                        help='Subjects directory (usually SUBJECTS_DIR)',
                        type=str, required=False, default=None)
    parser.add_argument('--all',
                        help='Process all subjects in SUBJECTS_DIR.',
                        action='store_true', required=False, default=False)
    parser.add_argument('--nodefaults',
                        help='Do not make views for the default measures in the "label" and "surf" directories',
                        action='store_true', required=False, default=False)
    parser.add_argument('--curvatures',
                        help='Make views for the curvatures in the "after/curvs" directory',
                        action='store_true', required=False, default=False)
    parser.add_argument('--htmldir',
                        help='HTML directory',
                        type=str, required=False, default=None)
    # Show a nice progress bar (only use in interactive sessions)
    parser.add_argument('--progress',
                        help='Show a progress bar',
                        action='store_true', required=False, default=False)
    args    = parser.parse_args()
    subjdir = args.subjdir
    if args.subjdir is None or args.subjdir == '':
        subjdir = os.getenv('SUBJECTS_DIR')
    if subjdir == '' or subjdir is None:
        raise ValueError('Either --subjdir option must be provided, or the environmental variable SUBJECTS_DIR must be set')
    if args.subj is None and not args.all:
        raise ValueError('Must specify subjects or use --all')
    if args.subj is not None and args.all:
        raise ValueError('Cannot specify subjects and also use --all')
    
    # Make a list of subjects
    if args.all:
        tmp = sorted(glob.glob(subjdir + '/*'))
        subjlist = []
        for t in tmp:
            tpth, tnam = os.path.split(t)
            if not tnam.startswith('fsaverage') and os.path.exists(os.path.join(t, 'scripts', 'recon-all.log')):
                subjlist.append(tnam)
    else:
        subjlist = args.subj.split(',')
    
    # Load locations, colors, and view schemes from a file
    specs = lib.io.read_json(os.path.join(os.path.dirname(__file__), 'etc', 'views.json'))
    
    # Surfaces and measures to plot
    surflist = []
    measlist = []
    if not args.nodefaults:
        surflist = surflist + specs['defaults']['surf']
        measlist = measlist + specs['defaults']['meas']
    if args.curvatures:
        surflist = surflist + specs['curvatures']['surf']
        measlist = measlist + specs['curvatures']['meas']
    surflist = sorted(list(set(surflist)))
    measlist = sorted(list(set(measlist)))
    
    if len(surflist) == 0:
        raise SyntaxError('No surfaces selected to plot. Nothing to do.')
    if len(measlist) == 0:
        meas = ['nothing']
    num_views = len(surflist)*len(measlist)
    
    # For each subject, make all figures
    for subj in subjlist:
        print('Working on {}'.format(os.path.join(subjdir, subj)))
        
        # Where to save
        outdir = os.path.join(subjdir, subj, 'after', 'views')
        os.makedirs(os.path.join(outdir,'thumbnails'), exist_ok=True)
        
        # For each surface and measure
        v = 0
        for surf in surflist:
            for meas in measlist:
                v = v + 1 # Increment at the beginning

                # Load/prepare the data
                if os.path.exists(os.path.join(outdir,'thumbnails','{}_{}_{}.png'.format(surf, meas, 'bhpos'))):
                    print('- Skipping ({}/{}): {}, {}, {} (already done)'.format(v, num_views, subj, surf, meas))
                    continue
                elif meas == 'nothing':
                    vtx, fac = load_surf(subjdir, subj, surf, specs)
                    dat = {}
                    for h in ['lh', 'rh', 'bh']:
                        dat[h] = np.zeros(vtx.shape[0])
                    rgb = np.array([[1,1,1]])*.75
                    specs['measures'][meas]['cmap'] = None
                    specs['measures'][meas]['rgb']  = rgb
                elif not os.path.exists(os.path.join(subjdir, subj, specs['surfaces'][surf]['dir'], 'rh.{}'.format(surf))):
                    print('- Skipping ({}/{}): {}, {}, {} (missing {})'.format(v, num_views, subj, surf, meas, surf))
                    continue
                elif not os.path.exists(os.path.join(subjdir, subj, specs['measures'][meas]['dir'], 'rh.{}'.format(meas))):
                    print('- Skipping ({}/{}): {}, {}, {} (missing {})'.format(v, num_views, subj, surf, meas, meas))
                    continue
                else:
                    print('- Working on ({}/{}): {}, {}, {}'.format(v, num_views, subj, surf, meas))
                    vtx, fac = load_surf(subjdir, subj, surf, specs)
                    dat, rgb = load_meas(subjdir, subj, meas, specs)
                    if specs['measures'][meas]['cmap'] is None:
                        specs['measures'][meas]['rgb'] = rgb
                
                # Define colormaps and color limits for edge cases.
                # All others come from the specs variable
                if meas not in specs['measures']:
                    specs['measures'][meas] = {}
                if 'dir' not in specs['measures'][meas]:
                    specs['measures'][meas]['dir'] = 'after'
                if 'dlim' not in specs['measures'][meas]:
                    dmin = np.min(dat['bh'])
                    dmax = np.max(dat['bh'])
                    if dmin*dmax < 0:
                        mx = max(abs(dmin),abs(dmax))
                        dlim = [-mx, mx]
                    else:
                        dlim = [dmin, dmax]
                    specs['measures'][meas]['dlim'] = dlim
                if 'clim' not in specs['measures'][meas]:
                    specs['measures'][meas]['clim'] = specs['measures'][meas]['dlim']
                if 'cmap' not in specs['measures'][meas]:
                    prod = specs['measures'][meas]['dlim'][0]*specs['measures'][meas]['dlim'][1]
                    if prod < 0:
                        specs['measures'][meas]['cmap'] = 'bwr'
                    else:
                        specs['measures'][meas]['cmap'] = 'viridis'

                # Plot and save views and corresponding thumbnails
                plot_views(vtx, fac, dat, outdir, surf, meas, specs)

                # Plot and save histograms and corresponding thumbnails
                if not os.path.exists(os.path.join(outdir,'thumbnails','hist_{}_bh.png'.format(meas))):
                    nbins = 150
                    plot_hist(dat, nbins, outdir, meas, specs)

    # For each combination of surfaces and meshes, make an HTML file
    if args.htmldir is not None and args.htmldir != '':
        for surf in surflist:
            for meas in measlist:
                makehtml(args.htmldir, subjlist, surf, meas, specs)
