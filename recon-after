#!/bin/bash

if [ -z "$1" ]; then
cat <<EOU
Retessellate surf/?h.orig, and then rerun recon-all from that point onwards.

Usage:

${0##*/} --subj <subject ID> [options]

Options:

--subj <subject ID>
  Specify the subject ID. Must exist in the SUBJECTS_DIR directory.

--sd <subjects directory>
  Specify the subjects directory if not SUBJECTS_DIR.

--revert
  Revert from the last backup if it exists thus deleting current results.

--nobackup
  Do not backup original outputs from recon-all, such that ${0##*/} will
  overwrite those outputs. Cannot be reversed; if a failure occurs, it will
  be necessary to run recon-all from scratch. Use only if you don't mind
  risking losing data or have limited storage space.

--progress
  Show a progress bar in longer steps. Avoid if running in a cluster
  or headless system, but encouraged in interactive sessions.

Requirements:
* FreeSurfer must be installed and configured properly.
* The subject must have been processed with recon-all up to the point where
  the surface registration is performed (?h.sphere.reg must exist).
* Either SUBJECTS_DIR must have been correctly set, or the option --sd must
  be provided with the path to the directory that contains all subjects.

_____________________________________
Anderson M. Winkler
University of Texas Rio Grande Valley
May/2025
https://brainder.org
EOU
exit 1
fi

check_fs() {
   # Check if the last run of recon-all was successful
   if [[ -f ${SUBJECTS_DIR}/${subj}/scripts/recon-all-status.log ]] ; then
      local fslog=$(sed '/^\s*$/d' ${SUBJECTS_DIR}/${subj}/scripts/recon-all-status.log | tail -n 1)
      if [[ ${fslog} =~ "exited with ERRORS" ]] ; then
         status=failed
         tdelta=indeterminable
      elif [[ ${fslog} =~ "finished without error" ]]; then
         status=success
         timestamp=$(echo "${fslog}" | sed 's/.*at //')
         tdelta=$(( $(date +%s) - $(date -d "${timestamp}" +%s) ))
      else
         status=unknown
         tdelta=unknown
      fi
   else
      status=unknown
      tdelta=unknown
   fi
   local -a result
   result[0]=${status}
   result[1]=${tdelta}
   echo "${result[@]}"
}

# Some default variables, will be modified later
T2pial=false     # Do -T2pial?
FLAIRpial=false  # Do -FLAIRpial?
NOBACKUP=false   # Do not backup, just overwrite existing files
REVERT=false     # Revert from the backup
PROGRESS=""      # Show a progress bar when retessellating? (avoid using in the cluster)

# Parse arguments
while [[ ${#} -gt 0 ]] ; do
  key="${1}"
  case ${key} in
    -subject|-subjid|-sid|-s|-subj|--subject|--subjid|--sid|--s|--subj)
      subj="${2}"
      shift 2
      ;;
    -sd|--sd)
      SUBJECTS_DIR="${2}"
      shift 2
      ;;
    -T2pial|--T2pial)
      T2pial=true
      shift
      ;;
    -FLAIRpial|--FLAIRpial)
      FLAIRpial=true
      shift
      ;;
    -revert|--revert)
      REVERT=true
      shift
      ;;
    -nobackup|--nobackup)
      NOBACKUP=true
      shift
      ;;
    -progress|--progress)
      PROGRESS="--progress"
      shift
      ;;
    *)
      echo "Unknown option: ${key}"
      exit 1
      ;;
  esac
done

# Argument checking
if ${REVERT} && ${NOBACKUP} ; then
   echo "Error: Cannot use --revert and --nobackup together."
   exit 1
fi

# Revert from the backup and exit
if ${REVERT} ; then
   ALLGOOD=true
   for dir in label mri scripts stats surf tmp touch trash ; do
      [[ ! -d ${SUBJECTS_DIR}/${subj}/fs.bak/${dir} ]] && ALLGOOD=false
   done
   if ${ALLGOOD} ; then
      for dir in label mri scripts stats surf tmp touch trash ; do
         echo "- Removing current ${SUBJECTS_DIR}/${subj}/${dir}"
         rm -rf ${SUBJECTS_DIR}/${subj}/${dir}
         echo "- Reverting ${SUBJECTS_DIR}/${subj}/fs.bak/${dir} to ${SUBJECTS_DIR}/${subj}"
         mv ${SUBJECTS_DIR}/${subj}/fs.bak/${dir} ${SUBJECTS_DIR}/${subj}/
      done
      echo "- Removing ${SUBJECTS_DIR}/${subj}/${dir} if empty as it should"
      rmdir ${SUBJECTS_DIR}/${subj}/fs.bak
      exit 0
   else
      echo "Error: Backup in ${SUBJECTS_DIR}/${subj}/fs.bak appears incomplete. Cannot revert automatically. Aborting."
      exit 1
   fi
fi

# Confirm we have FreeSurfer available
if [[ ! -e ${FREESURFER_HOME}/bin/recon-all ]] ; then
   echo "Error: FreeSurfer not correctly configured. Aborting."
   exit 1
fi

# Confirm that FS has run successfully up to the stage we need; if not, inform the user about the missing file
# Note we don't care here if recon-all.log shows last a failed run. As long as these files exist, we are ok to proceed.
FILELIST=(
   ${SUBJECTS_DIR}/${subj}/mri/brain.finalsurfs.mgz
   ${SUBJECTS_DIR}/${subj}/surf/lh.orig
   ${SUBJECTS_DIR}/${subj}/surf/rh.orig
   ${SUBJECTS_DIR}/${subj}/surf/autodet.gw.stats.lh.dat
   ${SUBJECTS_DIR}/${subj}/surf/autodet.gw.stats.rh.dat
   ${SUBJECTS_DIR}/${subj}/surf/lh.sphere.reg
   ${SUBJECTS_DIR}/${subj}/surf/rh.sphere.reg )
MISSING=()
for f in "${FILELIST[@]}" ; do
   if [[ ! -f "${f}" ]] ; then
      MISSING+=("${f}")
   fi
done
if [[ ! -z ${MISSING} ]] ; then
   echo "Error: Previous call to FreeSurfer did not run up to the stage needed to allow ${0##*/}."
   echo "Make sure all steps at least up to surface registration (up to -surfreg) have been executed successfully."
   echo "The missing files are:"
   for f in "${MISSING[@]}" ; do
      echo "- ${f}"
   done
   exit 1
fi

# If this is the first run, move to a safe place, than bring back by copying, otherwise adapt accordingly
if ${NOBACKUP} ; then
   echo "Warning: no backup will be made (option --nobackup was used). If the next steps fail, you will have to rerun recon-all."
else
   if [[ -e ${SUBJECTS_DIR}/${subj}/fs.bak ]] ; then
      echo "Error: A backup already exists in ${SUBJECTS_DIR}/${subj}/fs.bak."
      echo "To be able to run ${0##*/}, you need to remove or rename that backup. Aborting."
      exit 1
   else
      echo "Moving previous FS outputs for ${subj} to ${SUBJECTS_DIR}/${subj}/fs.bak"
      mkdir -p ${SUBJECTS_DIR}/${subj}/fs.bak
      for dir in label mri scripts stats surf tmp touch trash ; do
         mv ${SUBJECTS_DIR}/${subj}/${dir} ${SUBJECTS_DIR}/${subj}/fs.bak/
      done
   fi
   ALLGOOD=true
   for dir in label mri scripts stats surf tmp touch trash ; do
      [[ ! -d ${SUBJECTS_DIR}/${subj}/fs.bak/${dir} ]] && ALLGOOD=false
   done
   if ${ALLGOOD} ; then
      echo "Making new copies from the backup; we will work on the copies; deleting previous copies if they exist."
      for dir in label mri scripts stats surf tmp touch trash ; do
         echo "- Removing current ${SUBJECTS_DIR}/${subj}/${dir}"
         rm -rf ${SUBJECTS_DIR}/${subj}/${dir}
         echo "- Copying ${SUBJECTS_DIR}/${subj}/fs.bak/${dir} -> ${SUBJECTS_DIR}/${subj}/"
         cp -rp ${SUBJECTS_DIR}/${subj}/fs.bak/${dir} ${SUBJECTS_DIR}/${subj}/
      done
   else
      echo "Error: ${SUBJECTS_DIR}/${subj}/fs.bak does not contain all data needed. Aborting."
      exit 1
   fi
fi

# Now do the retessellation proper
mkdir -p ${SUBJECTS_DIR}/${subj}/after
$(dirname "$(readlink -f "${0}")")/retessellate.py --subj ${subj} --srf orig --subjdir "${SUBJECTS_DIR}" ${PROGRESS}

# Replace the existing ?h.orig for the retessellated
if [[ -f ${SUBJECTS_DIR}/${subj}/after/lh.orig.retess ]] && \
   [[ -f ${SUBJECTS_DIR}/${subj}/after/rh.orig.retess ]] ; then
   mv ${SUBJECTS_DIR}/${subj}/after/lh.orig.retess ${SUBJECTS_DIR}/${subj}/surf/lh.orig
   mv ${SUBJECTS_DIR}/${subj}/after/rh.orig.retess ${SUBJECTS_DIR}/${subj}/surf/rh.orig
else
   echo "Retessellation failed. The expected output files were not both produced:"
   echo "- ${SUBJECTS_DIR}/${subj}/after/lh.orig.retess"
   echo "- ${SUBJECTS_DIR}/${subj}/after/rh.orig.retess"
   exit 1
fi

# If the user didn't explicitly ask, check if the original recon-all used --T2pial or --FLAIRpial; if yes, we will use them
[[ $(grep "bin/recon-all" ${SUBJECTS_DIR}/${subj}/scripts/recon-all.log |grep -- "-T2pial"|wc -l) -gt 0 ]] && T2pial=true
[[ -f ${SUBJECTS_DIR}/${subj}/surf/lh.pial.T2 ]] && T2pial=true
[[ -f ${SUBJECTS_DIR}/${subj}/surf/rh.pial.T2 ]] && T2pial=true
[[ $(grep "bin/recon-all" ${SUBJECTS_DIR}/${subj}/scripts/recon-all.log |grep -- "-FLAIRpial"|wc -l) -gt 0 ]] && FLAIRpial=true
[[ -f ${SUBJECTS_DIR}/${subj}/surf/lh.pial.FLAIR ]] && FLAIRpial=true
[[ -f ${SUBJECTS_DIR}/${subj}/surf/rh.pial.FLAIR ]] && FLAIRpial=true
OPTS=""
${T2pial}    && OPTS="${OPTS} -T2pial"
${FLAIRpial} && OPTS="${OPTS} -FLAIRpial"

# Redo recon-all, from the point in which ?h.orig is used
${FREESURFER_HOME}/bin/recon-all \
  -s "${subj}" \
  -sd "${SUBJECTS_DIR}" \
  -white-preaparc \
  -cortex-label \
  -smooth2 \
  -inflate2 \
  -curvHK \
  -sphere \
  -surfreg \
  -jacobian_white \
  -avgcurv \
  -cortparc \
  -white \
  -pial \
  -curvstats \
  -cortribbon \
  -cortparc2 \
  -cortparc3 \
  -pctsurfcon \
  -hyporelabel \
  -aparc2aseg \
  -apas2aseg \
  -wmparc \
  -parcstats \
  -parcstats2 \
  -parcstats3 \
  -segstats \
  -balabels ${OPTS}

# Check if recon-all finished without error and make sure that that termination was just now
result=($(check_fs))
if [[ ${result[0]} != "success" ]] || [[ ${result[1]} -gt 5 ]] ; then
   echo "Error: recon-all either failed or finished a long time (more than 5 seconds) ago."
   exit 1
fi

