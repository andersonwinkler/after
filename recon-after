#!/bin/bash

if [ -z "$1" ]; then
cat <<EOU
Runs various additional surface processing steps after FreeSurfer's recon-all.

Usage:

${0##*/} --subj <subject ID> [options]

Options:

--subj <subject ID>
  Specify the subject ID. Must exist in the subjects directory.

--indir <input directory>
  Specify the input directory that contains the raw data. It could be
  a BIDS directory or any directory that contains a subdirectory named as
  the subject ID, and contains files named *_T1w.nii.gz, *_T2w.nii.gz and
  *_FLAIR.nii.gz (even if within subdirectories).
  All these files will be imported.

--sd <subjects directory>
  Specify the subjects directory if not the one defined by the environmental
  variable SUBJECTS_DIR.
  Note that either SUBJECTS_DIR must have been correctly set, or --sd must be
  provided with the path to the directory that contains all subjects.
  
--sdnew <subjects directory>
  Instead of overwriting the original data, store in a different
  subjects directory. If the subject already exists in this directory,
  the program will stop with an error to prevent overwriting. If this
  directory does not exist, an attempt will be made to create it. 

--all
  Do everything.

--base
  Process up to surface registration (minimum needed to retessellate).

--retessellate
  Do the retessellation to fsaverage. Data must have been processed with
  recon-all past the point in which the surface registration is performed
  (that is, ?h.sphere.reg must exist).

--refine [no|auto|T2|FLAIR]
  Refine the pial surface based on T2 or FLAIR. This option only has an
  effect if --retessellate is used. Choose from:
  "no"     Will not refine after retessellation; existing ?h.pial.T2 or
           ?h.pial.FLAIR from before retessellation will be deleted after
           the retessellation has completes.
  "auto":  Will detect if T2 or FLAIR were used in the original FS run
           (if the original run exists) or will use whichever is found in
           the input directory (--indir). If both FLAIR and T2 are found,
           ${0##*/} will not run and you will need to be specific whether
           you want to refine with T2 or FLAIR.
  "T2":    Specifies that you want to use T2 to refine the pial.
  "FLAIR": Specifies that you want to use FLAIR to refine the pial.
  Default is "auto".

--curvatures
  Compute various curvature metrics and their composites. The ?h.white
  and ?h.pial surfaces must exist.
  
--lgi
  Compute the local gyrification index (following Schaer et al., 2008).
  
--myelin
  Compute proxy measures for myelin based on T2 or FLAIR if either of these
  modalities were originally imported with the options --T2 or --FLAIR in
  recon-all. It is not necessary that the flags --T2pial or --FLAIR pial were
  originally used.
  
--subregions
  Run scripts that do subsegmentation of the amygala, thalamus, hippocampus,
  and brain stem.
  
--pve
  Compute measures of partial volume effects of GM, WM, and CSF for subcortical
  structures. If --subseg was used, will compute partial volume effects also for
  subsegmented structures.
  
--views
  Capture orthogonal views of surfaces and overlays, useful for quick
  inspection. These can be used to create an HTML file (see documentation).

--progress
  Show a progress bar in longer steps. Avoid if running in a cluster
  or headless system, but encouraged in interactive sessions.

Requirements:
* FreeSurfer must be installed and configured properly.

_____________________________________
Anderson M. Winkler
University of Texas Rio Grande Valley
May/2025
https://brainder.org
EOU
exit 1
fi

# Stop on crashes
set -e # Stop immediately if an error happens

# =====================================================================
check_fs() {
   # Check if the last run of recon-all was successful
   if [[ -f ${SUBJECTS_DIR}/${subj}/scripts/recon-all-status.log ]] ; then
      local fslog=$(sed '/^\s*$/d' ${SUBJECTS_DIR}/${subj}/scripts/recon-all-status.log | tail -n 1)
      if [[ ${fslog} =~ "exited with ERRORS" ]] ; then
         status=failed
         tdelta=indeterminable
      elif [[ ${fslog} =~ "finished without error" ]]; then
         status=success
         timestamp=$(echo "${fslog}" | sed 's/.*at //')
         tdelta=$(( $(date +%s) - $(date -d "${timestamp}" +%s) ))
      else
         status=unknown
         tdelta=unknown
      fi
   else
      status=unknown
      tdelta=unknown
   fi
   local -a result
   result[0]=${status}
   result[1]=${tdelta}
   echo "${result[@]}"
}

# =====================================================================
check_files() {
   # Confirm that FS has run successfully up to the stage we need;
   # If not, inform the user about the missing files. Note we don't care
   # here if recon-all.log shows last a failed run. As long as these
   # files exist, we are ok to proceed.
   FILELIST=${1}
   MISSING=()
   for f in "${FILELIST[@]}" ; do
      if [[ ! -f "${f}" ]] ; then
         MISSING+=("${f}")
      fi
   done
   if [[ ! -z ${MISSING} ]] ; then
      echo "Error: Previous call to FreeSurfer did not run up to the stage needed to allow ${2}."
      echo "The missing files are:"
      for f in "${MISSING[@]}" ; do
         echo "- ${f}"
      done
      exit 1
   fi
}

# =====================================================================
# Some default variables, most will be modified later
AFTERDIR=$(dirname "$(readlink -f "${0}")") # Directory of this script
IN_DIR=""               # Input directory containing a ${subj} subdirectory, for importing
NEW_SUBJECTS_DIR=""     # New subjects dir to store outputs. Will be replaced below.
DOALL=false             # Do everything
DOBASE=false            # Do a basic reconstruction up to surface registration
DORETESSELLATE=false    # Do the retessellation
DOREFINE="auto"         # How to deal with refining
DOCURVATURES=false      # Compute the better curvatures and their composites
DOLGI=false             # Compute the LGI
DOMYELIN=false          # Compute myelin surrogates from T2 or FLAIR
DOSUBREG=false          # Run substructure segmentations
DOPVE=false             # Compute partial volume effects
DOVIEWS=false           # Capture views for later inspection
PROGRESS=""             # Show a progress bar when retessellating? (avoid using in the cluster)

# Parse arguments
while [[ ${#} -gt 0 ]] ; do
   key="${1}"
   case ${key} in
   -subject|-subjid|-sid|-s|-subj|--subject|--subjid|--sid|--s|--subj)
      subj="${2}"
      shift 2
      ;;
   -id|-indir|--id|--indir)
      IN_DIR="${2}"
      shift 2
      ;;
   -sd|--sd)
      SUBJECTS_DIR="${2}"
      shift 2
      ;;
   -sdnew|--sdnew)
      NEW_SUBJECTS_DIR="${2}"
      shift 2
      ;;
   -all|--all)
      DOALL=true
      shift
      ;;
   -base|--base)
      DOBASE=true
      shift
      ;;
   -retessellate|--retessellate)
      DORETESSELLATE=true
      shift
      ;;
   -refine|--refine)
      DOREFINE="${2}"
      shift 2
      ;;
   -curvatures|--curvatures)
      DOCURVATURES=true
      shift
      ;;
   -lgi|--lgi|-localGI|--localGI)
      DOLGI=true
      shift
      ;;
   -myelin|--myelin)
      DOMYELIN=true
      shift
      ;;
   -subregions|--subregions)
      DOSUBREG=true
      shift
      ;;
   -views|--views)
      DOVIEWS=true
      shift
      ;;
   -progress|--progress)
      PROGRESS="--progress"
      shift
      ;;
   *)
      echo "Error: Unknown option: ${key}"
      exit 1
      ;;
   esac
done

# =====================================================================
# Confirm we have FreeSurfer available
if [[ ! -e ${FREESURFER_HOME}/bin/recon-all ]] ; then
   echo "Error: FreeSurfer not correctly configured."
   exit 1
fi

# Confirm we have FSL available
if ${DOALL} || ${DOMYELIN} ; then
   if [[ ! -e ${FSLDIR}/bin/fslmaths ]] ; then
      echo "Error: FSL not correctly configured."
      exit 1
   fi
fi

# Make sure we have a valid SUBJECTS_DIR
if [[ -z "${SUBJECTS_DIR}" ]] || [[ ! -d "$(readlink -f "${SUBJECTS_DIR}")" ]] ; then
   echo "Error: SUBJECTS_DIR variable not set or path provided with --sd is invalid."
   exit 1
fi

# The logic of starting a new subject from scratch (--indir) isn't compatible
# with copying from an existing to a new subjects dir (--sdnew)
if [[ ! -z "${NEW_SUBJECTS_DIR}" ]] && [[ ! -z "${IN_DIR}" ]] ; then
   echo "Error: Cannot use --indir together with --sdnew. If you want to start"
   echo "       fresh in a different SUBJECTS_DIR, use --indir with --sd."
   exit 1
fi

# We don't want to overwrite when importing new data
if [[ ! -z "${IN_DIR}" ]] && [[ -d "$(readlink -f "${IN_DIR}")" ]] && [[ -d "${SUBJECTS_DIR}/${subj}" ]] ; then
   echo "Error: Directory already exists: ${SUBJECTS_DIR}/${subj}"
   echo "       Will not import new data with --indir. Delete manually first."
   exit 1
fi

# We don't want to overwrite in --sdnew (would defeat the purpose)
if [[ ! -z "${NEW_SUBJECTS_DIR}" ]] ; then
   NEW_SUBJECTS_DIR=$(readlink -f "${NEW_SUBJECTS_DIR}")
   if [[ -d "${NEW_SUBJECTS_DIR}/${subj}" ]] ; then
      echo "Error: Directory already exists: ${NEW_SUBJECTS_DIR}/${subj}."
      echo "       Will not overwrite with --sdnew. Delete manually first."
   fi
fi

# If we will copy into a new SUBJECTS_DIR, the original must exist
if [[ ! -z "${NEW_SUBJECTS_DIR}" ]] ; then
   if [[ ! -d "${SUBJECTS_DIR}/${subj}" ]] ; then
      echo "Error: Directory not found: ${SUBJECTS_DIR}/${subj}"
      echo "       It must exist before it can be copied into ${NEW_SUBJECTS_DIR}."
   fi
fi

# =====================================================================
# Make a copy from SUBJECTS_DIR into NEW_SUBJECTS_DIR and use it
# instead of the original SUBJECTS_DIR
if [[ ! -z "${NEW_SUBJECTS_DIR}" ]] ; then
   mkdir -p ${NEW_SUBJECTS_DIR}
   cp -rp ${SUBJECTS_DIR}/${subj} ${NEW_SUBJECTS_DIR}/
   export SUBJECTS_DIR=${NEW_SUBJECTS_DIR}
fi

# =====================================================================
# Locate input data if we provided an input directory
IN_T1W=""
IN_T2W=""
IN_FLA=""
if [[ ! -z "${IN_DIR}" ]] && [[ -d "$(readlink -f "${IN_DIR}")" ]] ; then
   T1W_LIST=$(find -L ${IN_DIR}/${subj} -type f \( -name "*_T1w.nii"   -o -name "*_T1w.nii.gz"   \)|sort -r)
   T2W_LIST=$(find -L ${IN_DIR}/${subj} -type f \( -name "*_T2w.nii"   -o -name "*_T2w.nii.gz"   \)|sort -r)
   FLA_LIST=$(find -L ${IN_DIR}/${subj} -type f \( -name "*_FLAIR.nii" -o -name "*_FLAIR.nii.gz" \)|sort -r)
   for f in ${T1W_LIST} ; do
      IN_T1W="-i $(readlink -f ${f}) ${IN_T1W}"
   done
   for f in ${T2W_LIST} ; do
      IN_T2W="-T2 $(readlink -f ${f}) ${IN_T2W}"
   done
   for f in ${FLA_LIST} ; do
      IN_FLA="-FLAIR $(readlink -f ${f}) ${IN_FLA}"
   done
fi
[[ ! -z "${IN_T1W}" ]] && DOBASE=true

# Where we'll store the list of inputs. This file can't be created
# before recon-all runs otherwise the subject's directory will already
# exist, preventing recon-all from running
INPUTS=${SUBJECTS_DIR}/${subj}/after/inputs.txt

# =====================================================================
# Run an initial FreeSurfer call
if ${DOBASE} || ${DOALL} ; then

   # Run recon-all up to surface registration; import T1 if these were provided,
   # but not yet T2 or FLAIR for best compatibility across FreeSurfer versions
   ${FREESURFER_HOME}/bin/recon-all \
      -s "${subj}" \
      -sd "${SUBJECTS_DIR}" \
      -autorecon1 \
      -autorecon2 \
      -sphere \
      -surfreg \
      -norandomness \
      ${IN_T1W}

   # Check if recon-all finished without error and make sure that that termination was just now
   result=($(check_fs))
   if [[ ${result[0]} != "success" ]] || [[ ${result[1]} -gt 5 ]] ; then
      echo "Error: recon-all either failed or finished a long time (more than 5 seconds) ago."
      echo "       Cannot confirm surface reconstruction and registration were successful."
      echo "       Check the log files."
      exit 1
   fi

   # Keep track of T2 and FLAIR to import later when doing the retessellation
   # (if we were to import them now, recon-all in FS 8.0.0 would crash)
   mkdir -p ${SUBJECTS_DIR}/${subj}/after
   echo "${IN_T1W}"  > ${INPUTS}
   echo "${IN_T2W}" >> ${INPUTS}
   echo "${IN_FLA}" >> ${INPUTS}
fi

# =====================================================================
# Do the retessellation
if ${DORETESSELLATE} || ${DOALL} ; then

   # Check we have all files needed for this step
   FILELIST=(
      ${SUBJECTS_DIR}/${subj}/mri/brain.finalsurfs.mgz
      ${SUBJECTS_DIR}/${subj}/surf/lh.orig
      ${SUBJECTS_DIR}/${subj}/surf/rh.orig
      ${SUBJECTS_DIR}/${subj}/surf/autodet.gw.stats.lh.dat
      ${SUBJECTS_DIR}/${subj}/surf/autodet.gw.stats.rh.dat
      ${SUBJECTS_DIR}/${subj}/surf/lh.sphere.reg
      ${SUBJECTS_DIR}/${subj}/surf/rh.sphere.reg )
   check_files ${FILELIST} retesselation

   # Do the retessellation proper
   mkdir -p ${SUBJECTS_DIR}/${subj}/after
   ${AFTERDIR}/retessellate --subj ${subj} --srf orig --subjdir "${SUBJECTS_DIR}" ${PROGRESS}

   # Replace the existing ?h.orig for the retessellated
   if [[ -f   ${SUBJECTS_DIR}/${subj}/after/retess/lh.orig.retess ]] && \
      [[ -f   ${SUBJECTS_DIR}/${subj}/after/retess/rh.orig.retess ]] ; then
      cp -rpv ${SUBJECTS_DIR}/${subj}/after/retess/lh.orig.retess ${SUBJECTS_DIR}/${subj}/surf/lh.orig
      cp -rpv ${SUBJECTS_DIR}/${subj}/after/retess/rh.orig.retess ${SUBJECTS_DIR}/${subj}/surf/rh.orig
   else
      echo "Retessellation failed. The expected output files were not both produced:"
      echo "- ${SUBJECTS_DIR}/${subj}/after/retess/lh.orig.retess"
      echo "- ${SUBJECTS_DIR}/${subj}/after/retess/rh.orig.retess"
      exit 1
   fi

   # Decide how to deal with T2 and/or FLAIR and refining the pial surface
   case ${DOREFINE} in

      no) # No refining of the pial after retessellating
         OPTS=""
         ;;

      T2) # Refine using the T2
         OPTS=""
         T2pial=false
         if [[ -f ${INPUTS} ]] ; then
            IN_T2W=$(head -n 2 ${INPUTS}|tail -n 1)
            if [[ ! -z ${IN_T2W} ]] ; then
               OPTS="${IN_T2W}"
               T2pial=true
            else
               echo "Error: No T2 inputs are available for ${subj}."
               exit 1
            fi
         else
            [[ $(grep "bin/recon-all" ${SUBJECTS_DIR}/${subj}/scripts/recon-all.log |grep -- "-T2pial"|wc -l) -gt 0 ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/orig/T2raw.mgz    ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/T2.mgz            ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/lh.pial.T2       ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/rh.pial.T2       ]] && T2pial=true
         fi
         ${T2pial} && OPTS="${OPTS} -T2pial"
         ;;

      FLAIR) # Refine using the FLAIR
         OPTS=""
         FLAIRpial=false
         if [[ -f ${INPUTS} ]] ; then
            IN_FLA=$(head -n 3 ${INPUTS}|tail -n 1)
            if [[ ! -z ${IN_FLA} ]] ; then
               OPTS="${IN_FLA}"
               FLAIRpial=true
            else
               echo "Error: No FLAIR inputs are available for ${subj}."
               exit 1
            fi
         else
            [[ $(grep "bin/recon-all" ${SUBJECTS_DIR}/${subj}/scripts/recon-all.log |grep -- "-FLAIRpial"|wc -l) -gt 0 ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/orig/FLAIRraw.mgz ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/FLAIR.mgz         ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/lh.pial.FLAIR    ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/rh.pial.FLAIR    ]] && FLAIRpial=true            
         fi
         ${FLAIRpial} && OPTS="${OPTS} -FLAIRpial"
         ;;

      auto) # Discover automatically whether to do T2 or FLAIR
         OPTS=""
         T2pial=false
         FLAIRpial=false
         if [[ -f ${INPUTS} ]] ; then
            IN_T2W=$(head -n 2 ${INPUTS}|tail -n 1)
            IN_FLA=$(head -n 3 ${INPUTS}|tail -n 1)
            if [[ ! -z ${IN_T2W} ]] ; then
               OPTS="${IN_T2W}"
               T2pial=true
            fi
            if [[ ! -z ${IN_FLA} ]] ; then
               OPTS="${IN_FLA}"
               FLAIRpial=true
            fi
         else
            [[ $(grep "bin/recon-all" ${SUBJECTS_DIR}/${subj}/scripts/recon-all.log |grep -- "-T2pial"|wc -l) -gt 0 ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/orig/T2raw.mgz    ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/T2.mgz            ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/lh.pial.T2       ]] && T2pial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/rh.pial.T2       ]] && T2pial=true
            [[ $(grep "bin/recon-all" ${SUBJECTS_DIR}/${subj}/scripts/recon-all.log |grep -- "-FLAIRpial"|wc -l) -gt 0 ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/orig/FLAIRraw.mgz ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/mri/FLAIR.mgz         ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/lh.pial.FLAIR    ]] && FLAIRpial=true
            [[ -f ${SUBJECTS_DIR}/${subj}/surf/rh.pial.FLAIR    ]] && FLAIRpial=true 
         fi
         if ${T2pial} && ${FLAIRpial} ; then
            echo "Error: Cannot use both T2 and FLAIR for ${subj}."
            exit 1
         fi
         ${T2pial}    && OPTS="${OPTS} -T2pial"
         ${FLAIRpial} && OPTS="${OPTS} -FLAIRpial"
         ;;

      *)
         echo "Error: Unknown --refine option ${key} for subject ${subj}"
         exit 1
         ;;
   esac

   # Do recon-all, from the point in which ?h.orig is used
   ${FREESURFER_HOME}/bin/recon-all \
      -s "${subj}" \
      -sd "${SUBJECTS_DIR}" \
      -white-preaparc \
      -cortex-label \
      -smooth2 \
      -inflate2 \
      -curvHK \
      -sphere \
      -surfreg \
      -jacobian_white \
      -avgcurv \
      -cortparc \
      -white \
      -pial \
      -curvstats \
      -cortribbon \
      -cortparc2 \
      -cortparc3 \
      -pctsurfcon \
      -hyporelabel \
      -aparc2aseg \
      -apas2aseg \
      -wmparc \
      -parcstats \
      -parcstats2 \
      -parcstats3 \
      -segstats \
      -balabels ${OPTS}

   # Check if recon-all finished without error and make sure that that termination was just now
   result=($(check_fs))
   if [[ ${result[0]} != "success" ]] ; then #|| [[ ${result[1]} -gt 5 ]] ; then
      echo "Error: recon-all either failed or finished a long time (more than 5 seconds) ago."
      exit 1
   fi

   # Compute distances and vectors indicating the repositioning of the ?h.orig into ?h.white.preaparc
   for h in lh rh ; do
      echo ${AFTERDIR}/surfdist --ref ${SUBJECTS_DIR}/${subj}/surf/${h}.orig \
                           --mov ${SUBJECTS_DIR}/${subj}/surf/${h}.white.preaparc \
                           --out ${SUBJECTS_DIR}/${subj}/after/retess/${h}.orig2whitepreaparc
   done

   # Create the retessellated midthickness surface (not a typical FS output but sometimes created by other programs)
   for h in lh rh ; do
      if [[ -f ${SUBJECTS_DIR}/${subj}/surf/${h}.midthickness ]] ; then
         echo ${FREESURFER_HOME}/bin/mris_expand \
                    -thickness ${SUBJECTS_DIR}/${subj}/surf/${h}.white  \
                     0.5       ${SUBJECTS_DIR}/${subj}/surf/${h}.midthickness
      fi
   done
fi

# =====================================================================
# Do the computation of better curvatures
if ${DOCURVATURES} || ${DOALL} ; then

   # Check we have all files needed for this step
   FILELIST=(
      ${SUBJECTS_DIR}/${subj}/surf/lh.white
      ${SUBJECTS_DIR}/${subj}/surf/rh.white
      ${SUBJECTS_DIR}/${subj}/surf/lh.pial
      ${SUBJECTS_DIR}/${subj}/surf/rh.pial )
   check_files ${FILELIST} "computation of curvatures"
   
   # Compute the curvatures
   ${AFTERDIR}/curvatures --subj ${subj} --subjdir "${SUBJECTS_DIR}" --surf pial,white ${PROGRESS}
   ${AFTERDIR}/mantle     --subj ${subj} --subjdir "${SUBJECTS_DIR}"
fi

# =====================================================================
# Do the local gyrification index
if ${DOLGI} || ${DOALL} ; then

   # Check we have all files needed for this step
   FILELIST=(
      ${SUBJECTS_DIR}/${subj}/surf/lh.pial
      ${SUBJECTS_DIR}/${subj}/surf/rh.pial )
   check_files ${FILELIST} "computation of the LGI"

   # Compute the LGI proper
   PATH=${AFTERDIR}:${PATH} \
   ${FREESURFER_HOME}/bin/recon-all \
     -s "${subj}" \
     -sd "${SUBJECTS_DIR}" \
     -localGI
fi

# =====================================================================
# Compute the myelin proxy. There's no need to check if files exist as
# that will be done by melina.
if ${DOMYELIN} || ${DOALL} ; then
   ${AFTERDIR}/melina -s "${subj}" -c
fi

# =====================================================================
# Do the segmentation of subregions
if ${DOSUBREG} || ${DOALL} ; then
   ${FREESURFER_HOME}/bin/segment_subregions --cross "${subj}" --sd "${SUBJECTS_DIR}" thalamus
   ${FREESURFER_HOME}/bin/segment_subregions --cross "${subj}" --sd "${SUBJECTS_DIR}" hippo-amygdala
   ${FREESURFER_HOME}/bin/segment_subregions --cross "${subj}" --sd "${SUBJECTS_DIR}" brainstem
fi

# =====================================================================
# Make nice figures and histograms for visual inspection
if ${DOVIEWS} || ${DOALL} ; then
   OPTS=""
   (${DOCURVATURES}   || ${DOALL}) && OPTS="${OPTS} --curvatures --mantle"
   (${DOLGI}          || ${DOALL}) && OPTS="${OPTS} --lgi"
   (${DOMYELIN}       || ${DOALL}) && OPTS="${OPTS} --myelin"
   ${AFTERDIR}/views --subj ${subj} --subjdir "${SUBJECTS_DIR}" ${OPTS}
fi

